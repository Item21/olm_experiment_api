enum DeviceStatus {
    """online"""
    online

    """offline"""
    offline
}

type Software {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Device {
    id: ID!
    name: String!
    status: DeviceStatus
    deviceType: DeviceType! @belongsTo
    software: [Software!]! @belongsToMany
    port: String!
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateDevice {
    name: String!
    status: DeviceStatus
    device_type_id: ID!
    port: String!
    software: [ID!]!
}

input UpdateDevice {
    id: ID!
    name: String!
    device_type_id: ID!
    port: String!
    software: [ID!]!
}


type DeviceType {
    id: ID!
    name: String!
    devices: [Device!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

input CreateDeviceType {
    name: String!
}

input UpdateDeviceType {
    id: ID!
    name: String!
}

input CreateSoftware {
    name: String!
}

input UpdateSoftware {
    id: ID!
    name: String!
}


extend type Query @guard(with: ["sanctum"]){
    devices: [Device!]! @paginate(defaultCount: 10)
    device_types: [DeviceType!]! @paginate(defaultCount: 10)
    software: [Software!]! @paginate(defaultCount: 10)
    getDevice(id: ID! @eq): Device! @find
}

extend type Mutation @guard(with: ["sanctum"]){
    createDevice(input: CreateDevice @spread): Device! @create
    updateDevice(input: UpdateDevice @spread): Device! @update
    removeDevice(id: ID!): Device! @delete
    createDeviceType(input: CreateDeviceType @spread): DeviceType! @create
    updateDeviceType(input: UpdateDeviceType @spread): DeviceType! @update
    removeDeviceType(id: ID!): DeviceType! @delete
    createSoftware(input: CreateSoftware @spread): Software! @create
    updateSoftware(input: UpdateSoftware @spread): Software! @update
    removeSoftware(id: ID!): Software! @delete
}